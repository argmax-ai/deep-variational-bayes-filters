# Copyright (C) 2019-2023 Volkswagen Aktiengesellschaft,
# Berliner Ring 2, 38440 Wolfsburg, Germany
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from abc import abstractmethod
from typing import Dict
from typing import Union
import torch
from torch.utils.data import IterableDataset
from robolab.envs import SequenceModelEnv
from robolab.envs import Env
from robolab.generators import DreamGenerator
from robolab.generators import RealWorldGenerator
from robolab.models.agents.agent import Agent


class OnlineEpisodicDataset(IterableDataset):
    def __init__(
        self, agent: Agent, env: Env, steps: int, batch_size: int, deterministic: bool = False
    ):
        """An online dataset, every call produces a new batch online.

        An online dataset is an `IterableDataset` that generates
        its data on-demand. It doesn't store any data, it just produces
        a new batch whenever it is asked for new data. The data
        is generated by executing the current agent in the environment.
        This dataset generates a batch of episodes in each iteration.

        Parameters
        ----------
        agent
            Agent to do data collection. May be different that the
            agent under training, so it allows for both on- and off-policy
            training in an online setting.
        env
            Environment where the agent is operating.
        steps
            Number of steps to take in the environment.
        batch_size
            Desired batch size.
        """
        self.agent = agent
        self.env = env
        self.steps = steps
        self.batch_size = batch_size
        self.deterministic = deterministic

        self._generator = None

    @property
    def generator(self):
        return self._generator

    def __iter__(self):
        yield self.generator.generate(
            episodes=self.batch_size,
            steps=self.steps,
            batch_size=self.batch_size,
            deterministic=self.deterministic,
        )

    @abstractmethod
    def sample(
        self,
        episodes=None,
        steps=None,
        batch_size=None,
        agent_kwargs=None,
        deterministic=False,
        record=False,
        device="cpu",
    ) -> Dict[str, Union[torch.Tensor, Dict]]:
        """Sample a batch of trajectories.

        This is sometimes used instead of `__iter__` because it allows for
        various arguments that we don't want to fix at object instantiation.

        Parameters
        ----------
        episodes
        steps
        batch_size
        agent_kwargs
        deterministic
        record
        device

        Returns
        -------
        A batch of episodes.

        """


class OnlineDreamEpisodicDataset(OnlineEpisodicDataset):
    def __init__(self, agent, env: SequenceModelEnv, steps, batch_size):
        super().__init__(agent, env, steps=steps, batch_size=batch_size)
        self._generator = DreamGenerator(agent, env)

    def __iter__(self):
        yield self.generator.generate(
            episodes=self.batch_size, steps=self.steps, batch_size=self.batch_size
        )

    def sample(
        self,
        episodes=None,
        steps=None,
        batch_size=None,
        agent_kwargs=None,
        deterministic=False,
        record=False,
        device="cpu",
    ):
        if batch_size is None:
            batch_size = self.batch_size

        if steps is None:
            steps = self.steps

        return self.generator.generate(
            episodes=batch_size,
            steps=steps,
            agent_kwargs=agent_kwargs,
            batch_size=batch_size,
            deterministic=deterministic,
            device=device,
        )


class OnlineRealWorldEpisodicDataset(OnlineEpisodicDataset):
    def __init__(
        self,
        agent,
        env,
        steps,
        n_envs,
        max_steps,
        device,
        reset_between_rollouts=True,
        deterministic=False,
        record=False,
    ):
        super().__init__(agent, env, steps=steps, batch_size=n_envs, deterministic=deterministic)
        self.device = device
        self.record = record
        self.max_steps = max_steps
        self._generator = RealWorldGenerator(
            agent, env, reset_between_rollouts=reset_between_rollouts
        )

    def sample_n_steps(
        self, steps, deterministic=False, record=False, device="cpu"
    ) -> Dict[any, torch.Tensor]:
        return self.generator.generate_n_steps(
            steps,
            parallel_agents=self.batch_size,
            deterministic=deterministic,
            record=record,
            device=device,
        )

    def sample(
        self,
        episodes=None,
        steps=None,
        batch_size=None,
        agent_kwargs=None,
        deterministic=False,
        record=False,
        device="cpu",
    ):
        return self.generator.generate(
            episodes=episodes,
            steps=steps,
            batch_size=batch_size,
            deterministic=deterministic,
            record=record,
            device=device,
        )

    def __iter__(self):
        yield self.generator.generate(
            episodes=self.batch_size,
            steps=self.steps,
            batch_size=self.batch_size,
            deterministic=self.deterministic,
            record=self.record,
            device=self.device,
        )
